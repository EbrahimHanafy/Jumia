@using Jumia.DTO
@using Jumia.ViewModels
@model ProductProfileViewModel

<div class="container">
    <article class="product">       
        <h1 class="product__name">@Model.Product.ProductName</h1>
        <div class="row">
            <div class="col-md-6">
                <div class="product-images">
                    @foreach (var img in Model.Product.ProductImages)
                    {
                        if (img.IsMainImage == true)
                        {
                            <div class="main-image">
                                    <img id="mainImage" src="@Url.Content(img.ProductImageUrl)" alt="@img.ProductImageName" class="img-fluid">
                            </div>
                        }
                     }
                    <div class="thumbnail-bar"> 
                            @foreach (var img in Model.Product.ProductImages)
                            {
                            <img src="@Url.Content(img.ProductImageUrl)" alt="@img.ProductImageName" class="thumbnail active" onclick="changeImage(this)">
                            }
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="product__details">
                    <div class="product__price">
                        @if (Model.Product.BarCode != null || Model.Product.BarCode == " ")
                        {

                            <h2>Bar Code: <span class="price" style="color:black">@Model.Product.BarCode</span></h2>
                        }
                        else
                        {
                            <h2>Bar Code: <span class="price"> </span></h2>
                        }
                    </div>

                    @if (Model.Product.DiscountPersentage == 0 && Model.Product.Discount == 0)
                        {
                        <div class="product__price">
                            <h2>Price: <span class="price">$@Model.Product.Price</span></h2>
                        </div>

                        <div class="product__price">
                            <h2>Discount: <span class="price"> - </span></h2>
                        </div>
                        }
                        else
                        {
                        <div class="product__price">
                            <h2>Price: <span class="price">$@(Model.Product.Price - Model.Product.Discount)  <strong style="color: rgb(44, 62, 80)"> : </strong>  <span style="color:gray; text-decoration:line-through">$@Model.Product.Price</span></span></h2>
                        </div>

                        <div class="product__price">
                            <h2>Discount: <span class="price">@Model.Product.DiscountPersentage%</span></h2>
                        </div>
                        }

                    <div class="product__price">
                        @if (Model.AvailableQuantity != 0)
                        {
                            int AvailableQuantity = (Model.AvailableQuantity);
                            <h2>Availability: <span class="price">@AvailableQuantity pieces</span></h2>
                        }
                        else
                        {
                            <h2>Availability: <span class="price" style="color:red">Not available in stock</span></h2>
                        }
                    </div>
                    
                    <form class="product__form">
                        <!-- Color Size Dropdown -->
                        <div class="form-group">
                            
                            <label class="CartLable" for="size">Color & Size:</label>

                            @if (Model.ColorSizes != null && Model.ColorSizes.Any())
                            {
                                <select id="colorsize" class="form-control" onchange="loadColors()">
                                    <option value="" hidden >Select color & size</option>
                                    @foreach (var colorsize in Model.ColorSizes)
                                    {
                                        <option value="@colorsize.ProductColorSizeId" style="color:@colorsize.Color.ColorName">@colorsize.Color.ColorName : @colorsize.Size.SizeName </option>
                                    }
                                </select>
                            }
                            else if (Model.ColorSizes == null)
                            {
                                <p style="color: red;">Error: Colors and sizes data is unavailable or failed to load.</p>
                            }
                            else
                            {
                                <p style="color: red;"> No available Colors and sizes for this product.</p>
                            }
                        </div>
                        @* <!-- Color Dropdown -->
                        <div class="form-group">
                            <label class="CartLable" for="color">Color:</label>
                            @if (Model.Colors != null && Model.Colors.Any())
                            {
                                <select id="color" class="form-control">
                                    <option value="">Select Color</option>
                                    @foreach (var color in Model.Colors)
                                    {
                                        <option value="@color.ColorId">@color.ColorName</option>
                                    }
                                </select>
                            }
                            else if (Model.Colors == null)
                            {
                                <p style="color: red;">Error: Colors data is unavailable or failed to load.</p>
                            }
                            else
                            {
                                <p style="color: red;">No available colors for this product.</p>
                            }
						</div>*@

                        <div class="form-group">
                            <label class="CartLable" for="quantity">Quantity:</label>
                            <input name="quantity" id="quantity" class="form-control" type="number" min="1" value="1" />
                        </div>
                        <button type="submit" class="btn btn-primary">Add to Cart</button>
                    </form>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <section class="product__description">
                    <h2>Product Description</h2>
                    <p>@Model.Product.Description</p>
                </section>
            </div>
        
            <section class="product__materials">
                <h2>Product Features</h2>
                <ul>
                    @foreach (var feature in Model.Product.ProductFeatures)
                    {
                        <li>@feature.FeatureName</li>
                    }
                </ul>
            </section>
            
            <section class="product__materials">
                <h2>Materials of Care</h2>
                
                @if (Model.ProductMaterialsCare != null && Model.ProductMaterialsCare.Any())
                {
                    <ul>
                        @foreach (var item in Model.ProductMaterialsCare)
                        {
                            <li>@item.MaterialsCareIcon : @item.MaterialsCareName</li>
                        }
                    </ul>
                }
                else if (Model.ProductMaterialsCare == null)
				{
                    <p style="color: red;">Error: Materials of care data is unavailable or failed to load.</p>
                }
                else
                {
                    <p style="color: red;"> This product not assigned to any materials of care.</p>
                }
            </section>
        </div>

        <div class="row">
            <div class="col-12">
                <!-- ... (previous sections remain the same) ... -->
                <section class="product__add-review">
                    <partial name="_AddRate" model="Model.NewRate" />
                </section>

                <section class="product__reviews">
                    <h2>Customer Reviews:</h2>
                    <div class="overall-rating">
                        <span class="rating-number">@Model.ProductRateAverage</span>
                        <div class="stars">
                            @for (int i = 0; i < Model.ProductRateAverage; i++)
                            {
                                <span class="star filled">&#9733;</span>
                            }
                        </div>
                        <span class="rating-count">(125 reviews)</span>
                    </div>
                    <div class="review-list">
                        @if (Model.ProductRates != null && Model.ProductRates.Any())
                        {
                            @foreach (var rate in Model.ProductRates)
                            {
                                <div class="review-item">
                                    <div class="review-header">
                                        <span class="reviewer-name">@rate.UserName</span>
                                        <div class="review-rating">
                                            @for (int i = 0; i < rate.Rate; i++)
                                            {
                                                <span class="star filled">&#9733;</span> 
                                            }
                                        </div>
                                        <span class="review-date">@rate.RateDate.ToString("MM/dd/yyyy")</span>
                                    </div>
                                    <p class="review-text">@rate.Review</p>
                                </div>
                            }
                        }
                        <!-- Add more review items as needed -->
                    </div>
                </section>
            </div>
        </div>
    </article>
</div>
<script>
    function changeImage(thumbnail) {
        // Change main image
        document.getElementById('mainImage').src = thumbnail.src.replace('150x150', '500x500');

        // Update active thumbnail
        document.querySelectorAll('.thumbnail').forEach(thumb => thumb.classList.remove('active'));
        thumbnail.classList.add('active');
    }
    
    document.getElementById('reviewForm').addEventListener('submit', function (e) {
        e.preventDefault();
        // Here you would typically send the form data to a server
        // For this example, we'll just log it to the console
        console.log('Review submitted:', {
            name: document.getElementById('reviewerName').value,
            rating: document.querySelector('input[name="rating"]:checked').value,
            review: document.getElementById('reviewText').value
        });
        alert('Thank you for your review!');
        this.reset();
    });
    // Size Function
    // $(document).ready(function () {
    //     $('#sizeSelect').change(function () {
    //         var sizeId = $(this).val();
    //         var productId = /* Get product ID from the page, maybe from a hidden input field */;

    //         if (sizeId) {
    //             $.ajax({
    //                 url: `/Product/GetColorsBySize`, // Adjusted to point to the correct controller action
    //                 type: 'GET',
    //                 data: { productId: productId, sizeId: sizeId },
    //                 success: function (response) {
    //                     if (response.success) {
    //                         // Clear the color dropdown
    //                         $('#colorSelect').empty();
    //                         $('#colorSelect').append('<option value="">Select Color</option>');

    //                         // Populate colors based on the selected size
    //                         response.data.forEach(function (color) {
    //                             $('#colorSelect').append(`<option value="${color.colorId}">${color.colorName}</option>`);
    //                         });
    //                     } else {
    //                         alert(response.message); // Display error if no colors found
    //                     }
    //                 }
    //             });
    //         }
    //     });
    // });
    // Color Function
    // $(document).ready(function () {
    //     $('#colorSelect').change(function () {
    //         var colorId = $(this).val();
    //         var productId = /* Get product ID from the page, maybe from a hidden input field */;

    //         if (colorId) {
    //             $.ajax({
    //                 url: `/Product/GetSizesByColor`, // Adjusted to point to the correct controller action
    //                 type: 'GET',
    //                 data: { productId: productId, colorId: colorId },
    //                 success: function (response) {
    //                     if (response.success) {
    //                         // Clear the size dropdown
    //                         $('#sizeSelect').empty();
    //                         $('#sizeSelect').append('<option value="">Select Size</option>');

    //                         // Populate sizes based on the selected color
    //                         response.data.forEach(function (size) {
    //                             $('#sizeSelect').append(`<option value="${size.sizeId}">${size.sizeName}</option>`);
    //                         });
    //                     } else {
    //                         alert(response.message); // Display error if no sizes found
    //                     }
    //                 }
    //             });
    //         }
    //     });
    // });
</script>
<style>
    .product {
        font-family: Arial, sans-serif;
        color: #333;
    }

    .product__name {
        font-size: 2.5rem;
        margin-bottom: 1.5rem;
        color: #2c3e50;
    }

    .product-images {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .main-image {
        width: 100%;
        max-width: 500px;
        margin-bottom: 1rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
    }

        .main-image img {
            width: 100%;
            height: auto;
            display: block;
        }

    .thumbnail-bar {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-bottom: 2rem;
    }

    .thumbnail {
        width: 80px;
        height: 80px;
        object-fit: cover;
        cursor: pointer;
        border: 2px solid transparent;
        border-radius: 4px;
        transition: all 0.3s ease;
    }

        .thumbnail:hover {
            transform: scale(1.05);
        }

        .thumbnail.active {
            border-color: #3498db;
        }

    .product__details {
        background-color: #f8f9fa;
        padding: 2rem;
        border-radius: 8px;
    }

    .product__price .price {
        font-size: 1.5rem;
        color: darkred;
        font-weight: bold;
    }

    .product__rating .rating {
        font-size: 1.2rem;
    }

    .star {
        font-size: 1.5rem;
        color: #f1c40f;
    }

    .product__form .form-group {
        margin-bottom: 0;
    }

    .CartLable {
        font-family: "Inter", sans-serif;
        color: #6995B1;
    }
    .form-control {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-bottom: 0;
    }

    .btn-primary {
        background-color: #3498db;
        color: white;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-primary:hover {
            background-color: #2980b9;
        }

    .product__description, .product__features, .product__materials {
        margin-top: 2rem;
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 8px;
    }

    h2 {
        font-size: 25px;
        color: #2c3e50;
        margin-bottom: 1rem;
    }

    ul {
        padding-left: 1.5rem;
    }

    li {
        margin-bottom: 0.5rem;
    }

    .product__reviews {
        margin-top: 3rem;
        margin-bottom: 3rem;
        padding: 2rem;
        background-color: #f8f9fa;
        border-radius: 8px;
    }

    .overall-rating {
        display: flex;
        align-items: center;
        margin-bottom: 2rem;
    }

    .rating-number {
        font-size: 3rem;
        font-weight: bold;
        margin-right: 1rem;
    }

    .small-rating-number {
        font-size: 1rem;
        font-weight: bold;
        margin-right: 1rem;
    }

    .stars {
        font-size: 1.5rem;
        color: #f1c40f;
        margin-right: 1rem;
    }

    .rating-count {
        color: #7f8c8d;
    }

    .review-list {
        border-top: 1px solid #ddd;
        padding-top: 1rem;
    }

    .review-item {
        margin-bottom: 1.5rem;
        padding-bottom: 1.5rem;
        border-bottom: 1px solid #eee;
    }

    .review-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 0.5rem;
    }

    .reviewer-name {
        font-weight: bold;
    }

    .review-rating {
        font-size: 1rem;
        color: #f1c40f;
    }

    .review-date {
        color: #7f8c8d;
        font-size: 0.9rem;
    }

    .review-text {
        line-height: 1.6;
    }

    .star.half-filled {
        position: relative;
        display: inline-block;
    }

    .star.half-filled::after {
        content: '\2733';
        position: absolute;
        left: 0;
        width: 50%;
        overflow: hidden;
        color: #f1c40f;
    }

    .product__add-review {
        margin-top: 3rem;
        margin-bottom: 3rem;
        padding: 2rem;
        background-color: #f8f9fa;
        border-radius: 8px;
    }

    .rating {
        display: flex;
        flex-direction: row-reverse;
        justify-content: flex-end;
    }

    .rating input {
        display: none;
    }

    .rating label {
        font-size: 2rem;
        color: #ddd;
        cursor: pointer;
        transition: color 0.3s ease;
    }

    .rating label:hover,
    .rating label:hover ~ label,
    .rating input:checked ~ label {
        color: #f1c40f;
    }

    #reviewForm .form-group {
        margin-bottom: 1rem;
    }

    #reviewForm label {
        display: block;
        margin-bottom: 0.5rem;
    }

    #reviewForm .btn-primary {
        margin-top: 1rem;
    }
</style>